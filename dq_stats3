# dq_reports.py
from datetime import date
from typing import Dict, List, Union, Optional
from ninja import Router
from core.db import DBConnection

router = Router(tags=["DQ Reports"])

# Fully-qualified view names (niwa, not niew)
VW_SUMMARY       = "niwa_dev.gold.vw_smbc_marx_validation_summary_report"
VW_STALENESS     = "niwa_dev.gold.vw_smbc_marx_validation_staleness_report"
VW_OUTLIERS      = "niwa_dev.gold.vw_smbc_marx_validation_outlier_report"
VW_AVAILABILITY  = "niwa_dev.gold.vw_smbc_marx_validation_availability_report"
VW_REASONABILITY = "niwa_dev.gold.vw_smbc_marx_validation_reasonability_report"
VW_SCHEMA        = "niwa_dev.gold.vw_smbc_marx_validation_schema_report"


@router.get("/dq/summary", response=List[Dict[str, Union[str, int, float]]])
def dq_summary(request, report_date: Optional[date] = None, limit: int = 500):
    with DBConnection() as db:
        if report_date:
            q = f"""
                SELECT * FROM {VW_SUMMARY}
                WHERE CAST(report_date AS date) = DATE '{report_date}'
                LIMIT {int(limit)}
            """
        else:
            q = f"""
                SELECT * FROM {VW_SUMMARY}
                ORDER BY report_date DESC
                LIMIT {int(limit)}
            """
        df = db.execute(q, df=True)
        return df.to_dict(orient="records")


@router.get("/dq/staleness", response=List[Dict[str, Union[str, int, float]]])
def dq_staleness(request, report_date: Optional[date] = None, limit: int = 500):
    with DBConnection() as db:
        if report_date:
            q = f"""
                SELECT * FROM {VW_STALENESS}
                WHERE CAST(report_date AS date) = DATE '{report_date}'
                LIMIT {int(limit)}
            """
        else:
            q = f"""
                SELECT * FROM {VW_STALENESS}
                ORDER BY report_date DESC
                LIMIT {int(limit)}
            """
        df = db.execute(q, df=True)
        return df.to_dict(orient="records")


@router.get("/dq/outliers", response=List[Dict[str, Union[str, int, float]]])
def dq_outliers(request, report_date: Optional[date] = None, limit: int = 500):
    with DBConnection() as db:
        if report_date:
            q = f"""
                SELECT * FROM {VW_OUTLIERS}
                WHERE CAST(report_date AS date) = DATE '{report_date}'
                LIMIT {int(limit)}
            """
        else:
            q = f"""
                SELECT * FROM {VW_OUTLIERS}
                ORDER BY report_date DESC
                LIMIT {int(limit)}
            """
        df = db.execute(q, df=True)
        return df.to_dict(orient="records")


@router.get("/dq/availability", response=List[Dict[str, Union[str, int, float]]])
def dq_availability(request, report_date: Optional[date] = None, limit: int = 500):
    with DBConnection() as db:
        if report_date:
            q = f"""
                SELECT * FROM {VW_AVAILABILITY}
                WHERE CAST(report_date AS date) = DATE '{report_date}'
                LIMIT {int(limit)}
            """
        else:
            q = f"""
                SELECT * FROM {VW_AVAILABILITY}
                ORDER BY report_date DESC
                LIMIT {int(limit)}
            """
        df = db.execute(q, df=True)
        return df.to_dict(orient="records")


@router.get("/dq/reasonability", response=List[Dict[str, Union[str, int, float]]])
def dq_reasonability(request, report_date: Optional[date] = None, limit: int = 500):
    with DBConnection() as db:
        if report_date:
            q = f"""
                SELECT * FROM {VW_REASONABILITY}
                WHERE CAST(report_date AS date) = DATE '{report_date}'
                LIMIT {int(limit)}
            """
        else:
            q = f"""
                SELECT * FROM {VW_REASONABILITY}
                ORDER BY report_date DESC
                LIMIT {int(limit)}
            """
        df = db.execute(q, df=True)
        return df.to_dict(orient="records")


@router.get("/dq/schema", response=List[Dict[str, Union[str, int, float]]])
def dq_schema(request, report_date: Optional[date] = None, limit: int = 500):
    with DBConnection() as db:
        if report_date:
            q = f"""
                SELECT * FROM {VW_SCHEMA}
                WHERE CAST(report_date AS date) = DATE '{report_date}'
                LIMIT {int(limit)}
            """
        else:
            q = f"""
                SELECT * FROM {VW_SCHEMA}
                ORDER BY report_date DESC
                LIMIT {int(limit)}
            """
        df = db.execute(q, df=True)
        return df.to_dict(orient="records")
