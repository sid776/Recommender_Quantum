# backend/services/api/dq_stats.py
from __future__ import annotations
from datetime import date, datetime
from decimal import Decimal
from typing import Any, Dict, List, Optional

from ninja import Router
from fastapi.responses import JSONResponse

from backend.objects.dq_reports import DQReports

router = Router(tags=["DQ Reports"])

def _to_jsonable(rows: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    import math
    import numpy as np
    import pandas as pd

    safe_rows: List[Dict[str, Any]] = []
    for r in rows or []:
        safe: Dict[str, Any] = {}
        for k, v in (r or {}).items():
            key = str(k)

            # pandas missing?
            if v is not None and (pd.isna(v) if hasattr(pd, "isna") else False):
                v = None

            # numpy scalars
            if isinstance(v, (np.integer,)):
                v = int(v)
            elif isinstance(v, (np.floating,)):
                v = float(v)
                if math.isnan(v) or math.isinf(v):
                    v = None
            elif isinstance(v, (np.bool_,)):
                v = bool(v)

            # timestamps / dates
            elif isinstance(v, (pd.Timestamp, datetime)):
                v = v.isoformat()
            elif isinstance(v, date):
                v = v.isoformat()

            # Decimal
            elif isinstance(v, Decimal):
                v = float(v)

            safe[key] = v
        safe_rows.append(safe)
    return safe_rows

@router.get("/dq/combined", response=List[Dict[str, Any]])
def dq_combined(
    request,
    report_date: Optional[date] = None,
    limit: int = 500,
):
    rows = DQReports.get_all(report_date=report_date, limit=limit)
    return JSONResponse(content=_to_jsonable(rows))
